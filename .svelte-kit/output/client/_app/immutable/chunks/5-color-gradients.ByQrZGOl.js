import{s as k,n as h,a as x,e as F}from"./scheduler.HexUyfy1.js";import{S as H,i as S,e as A,c as y,q as P,d as i,o as j,b as u,f as E,h as G,m as I,t as q,j as B,k as M,s as C,H as T,g as D,a as v,n as z}from"./index.CAYvhHec.js";import{g as V,a as b}from"./spread.CgU5AtxT.js";import{M as J}from"./mdsvex.CwxQx7fH.js";function K(p){let e;return{c(){e=A("div"),this.h()},l(a){e=y(a,"DIV",{class:!0}),P(e).forEach(i),this.h()},h(){j(e,"class","gradient svelte-19u65kp")},m(a,n){u(a,e,n)},p:h,i:h,o:h,d(a){a&&i(e)}}}class L extends H{constructor(e){super(),S(this,e,null,K,k,{})}}function O(p){let e,a="Gradient Images from open-props",n,o,s="CSS used",l,c,N=`<pre class="shiki poimandres" style="background-color:#1b1e28;color:#a6accd" tabindex="0"><code><span class="line"><span style="color:#E4F0FBD0;font-style:italic">.</span><span style="color:#5FB3A1;font-style:italic">gradient</span><span style="color:#A6ACCD"> &#123;</span></span>
<span class="line"><span style="color:#ADD7FF">		background-image</span><span style="color:#A6ACCD">: var(--gradient-3), var(--noise-3);</span></span>
<span class="line"><span style="color:#ADD7FF">		filter</span><span style="color:#A6ACCD">: var(--noise-filter-3);</span></span>
<span class="line"><span style="color:#ADD7FF">		background-size</span><span style="color:#A6ACCD">: </span><span style="color:#ADD7FF">cover</span><span style="color:#A6ACCD">;</span></span>
<span class="line"><span style="color:#ADD7FF">		filter</span><span style="color:#A6ACCD">: var(--noise-filter-1);</span></span>
<span class="line"><span style="color:#ADD7FF">		border-radius</span><span style="color:#A6ACCD">: var(--radius-2);</span></span>
<span class="line"><span style="color:#A6ACCD">		aspect-ratio: var(--ratio-landscape);</span></span>
<span class="line"><span style="color:#A6ACCD">&#125;</span></span></code></pre>`,f,d,$="Created the following beautiful image. Now I just have to figure out how to get this as an image somehow.",_,m,g;return m=new L({}),{c(){e=A("h3"),e.textContent=a,n=C(),o=A("p"),o.textContent=s,l=C(),c=new T(!1),f=C(),d=A("p"),d.textContent=$,_=C(),E(m.$$.fragment),this.h()},l(t){e=y(t,"H3",{id:!0,"data-svelte-h":!0}),D(e)!=="svelte-i69ou9"&&(e.textContent=a),n=v(t),o=y(t,"P",{"data-svelte-h":!0}),D(o)!=="svelte-1ds7gpg"&&(o.textContent=s),l=v(t),c=z(t,!1),f=v(t),d=y(t,"P",{"data-svelte-h":!0}),D(d)!=="svelte-aygi1l"&&(d.textContent=$),_=v(t),G(m.$$.fragment,t),this.h()},h(){j(e,"id","gradient-images-from-open-props"),c.a=f},m(t,r){u(t,e,r),u(t,n,r),u(t,o,r),u(t,l,r),c.m(N,t,r),u(t,f,r),u(t,d,r),u(t,_,r),I(m,t,r),g=!0},p:h,i(t){g||(q(m.$$.fragment,t),g=!0)},o(t){B(m.$$.fragment,t),g=!1},d(t){t&&(i(e),i(n),i(o),i(l),c.d(),i(f),i(d),i(_)),M(m,t)}}}function Q(p){let e,a;const n=[p[0],w];let o={$$slots:{default:[O]},$$scope:{ctx:p}};for(let s=0;s<n.length;s+=1)o=x(o,n[s]);return e=new J({props:o}),{c(){E(e.$$.fragment)},l(s){G(e.$$.fragment,s)},m(s,l){I(e,s,l),a=!0},p(s,[l]){const c=l&1?V(n,[l&1&&b(s[0]),l&0&&b(w)]):{};l&2&&(c.$$scope={dirty:l,ctx:s}),e.$set(c)},i(s){a||(q(e.$$.fragment,s),a=!0)},o(s){B(e.$$.fragment,s),a=!1},d(s){M(e,s)}}}const w={title:"Color Gradients and Noise Experiments",description:"Tesing the color gradient and noise settings from open-props.",date:"2024-6-26",categories:["sveltekit","svelte"],published:!0};function R(p,e,a){return p.$$set=n=>{a(0,e=x(x({},e),F(n)))},e=F(e),[e]}class Z extends H{constructor(e){super(),S(this,e,R,Q,k,{})}}export{Z as default,w as metadata};
